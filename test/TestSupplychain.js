// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain')
const FarmerRole = artifacts.require('FarmerRole')
const MillRole = artifacts.require('MillRole');
const RefineryRole = artifacts.require('RefineryRole');
const DistributorRole = artifacts.require('DistributorRole')
const RetailerRole = artifacts.require('RetailerRole')
const ConsumerRole = artifacts.require('ConsumerRole')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    const productNotes = "Best beans for Espresso"
    const priceToDistributor = web3.utils.toWei("1", "ether")
    const priceToConsumer = web3.utils.toWei("2", "ether")
    const millID = accounts[2];
    const refineryID = accounts[3];
    const distributorID = accounts[4]
    const retailerID = accounts[5]
    const consumerID = accounts[6]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    // console.log("ganache-cli accounts used here...")
    // console.log("Contract Owner: accounts[0] ", accounts[0])
    // console.log("Farmer: accounts[1] ", accounts[1])
    // console.log("Distributor: accounts[2] ", accounts[2])
    // console.log("Retailer: accounts[3] ", accounts[3])
    // console.log("Consumer: accounts[4] ", accounts[4])

    it("Allows a farmer to harvest sugarcane", async() => {
        const supplyChain = await SupplyChain.deployed()
        const farmerRole = await FarmerRole.deployed()
        await farmerRole.addFarmer(originFarmerID);

        // Declare and Initialize a variable for event
        let eventEmitted = false

        // Watch the emitted event Harvested()
        supplyChain.Harvested({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as Harvested by calling function harvestSugarcane()
        await supplyChain.harvestSugarcane(
            upc,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: originFarmerID }
        )

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })
    
    it("Allows a farmer to send sugarcane to a mill", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event SentTomill()
        supplyChain.SentToMill({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as SentTomill by calling function sendToMill()
        await supplyChain.sendToMill(upc, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  

    it("Allows a mill to receive sugarcane", async() => {
        const supplyChain = await SupplyChain.deployed()
        const millRole = await MillRole.deployed()
        await millRole.addMill(millID);
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ReceivedByMill()
        supplyChain.ReceivedByMill({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as ReceivedByMill by calling function receiveByMill()
        await supplyChain.receiveByMill(upc, { from: millID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], millID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  

    it("Allows a mill to mill sugarcane", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Milled()
        supplyChain.Milled({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as Milled by calling function millSugarcane()
        await supplyChain.millSugarcane(upc, { from: millID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], millID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    it("Allows a mill to send raw sugar to a refinery", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event SentToRefinery()
        supplyChain.SentToRefinery({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as SentToRefinery by calling function sendToRefinery()
        await supplyChain.sendToRefinery(upc, { from: millID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], millID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    it("Allows a refinery to receive raw sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        const refineryRole = await RefineryRole.deployed()
        await refineryRole.addRefinery(refineryID);
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ReceivedByRefinery()
        supplyChain.ReceivedByRefinery({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as ReceivedByRefinery by calling function receiveByRefinery()
        await supplyChain.receiveByRefinery(upc, { from: refineryID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], refineryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    it("Allows a refinery to refine raw sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Refined()
        supplyChain.Refined({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as Refined by calling function refineRawSugar()
        await supplyChain.refineRawSugar(upc, { from: refineryID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], refineryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    
  
    it("Allows a refinery to pack refined sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Packed()
        supplyChain.Packed({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as Packed by calling function packRefinedSugar()
        await supplyChain.packRefinedSugar(upc, { from: refineryID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], refineryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], 0, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 
    
    it("Allows a refinery to sell refined sugar to distributors", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ForSaleToDistributor()
        supplyChain.ForSaleToDistributor({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as ForSaleToDistributor by calling function sellToDistributor()
        await supplyChain.sellToDistributor(upc, priceToDistributor, { from: refineryID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], refineryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })
    
    it("Allows a distributor to buy sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        const distributorRole = await DistributorRole.deployed()
        await distributorRole.addDistributor(distributorID)
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event BoughtByDistributor()
        supplyChain.BoughtByDistributor({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Get account balances before transaction
        const distributorBalanceBefore = web3.utils.toBN(await web3.eth.getBalance(distributorID))
        const refineryBalanceBefore = web3.utils.toBN(await web3.eth.getBalance(refineryID))

        // Mark an item as BoughtByDistributor by calling function buyByDistributor()
        let payment = web3.utils.toWei("2", "ether");
        let receipt = await supplyChain.buyByDistributor(upc, { from: distributorID, value: payment })
        let tx = await web3.eth.getTransaction(receipt.tx);

        // Get account balances after transaction
        const distributorBalanceAfter = web3.utils.toBN(await web3.eth.getBalance(distributorID))
        const refineryBalanceAfter = web3.utils.toBN(await web3.eth.getBalance(refineryID))

        // Verify account balances
        let gasUsed = web3.utils.toBN(receipt.receipt.gasUsed)
        let gasPrice = web3.utils.toBN(tx.gasPrice)
        let gasCost = gasUsed.mul(gasPrice)
        let priceBN = web3.utils.toBN(priceToDistributor);
        let expectedBalanceDistributor = distributorBalanceBefore.sub(priceBN).sub(gasCost);
        let expectedBalanceRefinery = refineryBalanceBefore.add(priceBN);
        assert.equal(expectedBalanceDistributor.toString(), distributorBalanceAfter.toString())
        assert.equal(expectedBalanceRefinery.toString(), refineryBalanceAfter.toString())

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })     
    
    it("Allows a distributor to send sugar to a retailer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event SentToRetailer()
        supplyChain.SentToRetailer({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as SentToRetailer by calling function sendToRetailer()
        await supplyChain.sendToRetailer(upc, { from: distributorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  
    
    it("Allows a retailer to receive sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        const retailerRole = await RetailerRole.deployed()
        await retailerRole.addRetailer(retailerID);

        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ReceivedByRetailer()
        supplyChain.ReceivedByRetailer({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as ReceivedByRetailer by calling function receiveByRetailer()
        await supplyChain.receiveByRetailer(upc, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], 0, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 11, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 
    
    it("Allows a retailer to sell sugar to consumers", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event ForSaleToConsumer()
        supplyChain.ForSaleToConsumer({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Mark an item as ForSaleToConsumer by calling function sellToConsumer()
        await supplyChain.sellToConsumer(upc, priceToConsumer, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], priceToConsumer, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 12, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  

    it("Allows a consumer to buy sugar", async() => {
        const supplyChain = await SupplyChain.deployed()
        const consumerRole = await ConsumerRole.deployed()
        await consumerRole.addConsumer(consumerID)

        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event BoughtByConsumer()
        supplyChain.BoughtByConsumer({
            filter: {upc: upc}
        }, (err, res) => {
            if (err) {
                console.log(err)
            } else if (res) {
                eventEmitted = true
            }
        })

        // Get account balances before transaction
        const consumerBalanceBefore = web3.utils.toBN(await web3.eth.getBalance(consumerID))
        const retailerBalanceBefore = web3.utils.toBN(await web3.eth.getBalance(retailerID))

        // Mark an item as BoughtByConsumer by calling function buyByConsumer()
        let payment = web3.utils.toWei("3", "ether");
        let receipt = await supplyChain.buyByConsumer(upc, { from: consumerID, value: payment })
        let tx = await web3.eth.getTransaction(receipt.tx);

        // Get account balances after transaction
        const consumerBalanceAfter = web3.utils.toBN(await web3.eth.getBalance(consumerID))
        const retailerBalanceAfter = web3.utils.toBN(await web3.eth.getBalance(retailerID))

        // Verify account balances
        let gasUsed = web3.utils.toBN(receipt.receipt.gasUsed)
        let gasPrice = web3.utils.toBN(tx.gasPrice)
        let gasCost = gasUsed.mul(gasPrice)
        let priceBN = web3.utils.toBN(priceToConsumer);
        let expectedBalanceConsumer = consumerBalanceBefore.sub(priceBN).sub(gasCost);
        let expectedBalanceRetailer = retailerBalanceBefore.add(priceBN);
        assert.equal(expectedBalanceConsumer.toString(), consumerBalanceAfter.toString())
        assert.equal(expectedBalanceRetailer.toString(), retailerBalanceAfter.toString())

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], priceToConsumer, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 13, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], consumerID, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  

    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[3], priceToDistributor, 'Error: Missing or Invalid priceToDistributor')
        assert.equal(resultBufferTwo[4], priceToConsumer, 'Error: Missing or Invalid priceToConsumer')
        assert.equal(resultBufferTwo[5], 13, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], millID, 'Error: Invalid millID')
        assert.equal(resultBufferTwo[7], refineryID, 'Error: Invalid refineryID')
        assert.equal(resultBufferTwo[8], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[9], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[10], consumerID, 'Error: Invalid consumerID')
    })

});

