// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "../sugarcore/Ownable.sol";
import "../sugaraccesscontrol/FarmerRole.sol";
import "../sugaraccesscontrol/MillRole.sol";
import "../sugaraccesscontrol/RefineryRole.sol";
import "../sugaraccesscontrol/DistributorRole.sol";
import "../sugaraccesscontrol/RetailerRole.sol";
import "../sugaraccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable {

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint256 sku;

  FarmerRole farmers;
  MillRole mills;
  RefineryRole refineries;
  DistributorRole distributors;
  RetailerRole retailers;
  ConsumerRole consumers;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping(uint256 => Item) items;

  // Define enum 'State' with the following values:
  enum State {
    Harvested,              // 0
    SentToMill,             // 1
    ReceivedByMill,         // 2
    Milled,                 // 3
    SentToRefinery,         // 4
    ReceivedByRefinery,     // 5
    Refined,                // 6
    Packed,                 // 7
    ForSaleToDistributor,   // 8
    BoughtByDistributor,    // 9
    SentToRetailer,         // 10
    ReceivedByRetailer,     // 11
    ForSaleToConsumer,      // 12
    BoughtByConsumer        // 13
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint256 sku; // Stock Keeping Unit (SKU)
    uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;
    State itemState;  // Product State as represented in the enum above 
    string productNotes;
    uint256 priceToDistributor;
    uint256 priceToConsumer; 
    address originFarmerID; 
    string originFarmName; 
    string originFarmInformation; 
    string originFarmLatitude; 
    string originFarmLongitude;  
    address millID;
    address refineryID; 
    address distributorID;  
    address retailerID; 
    address consumerID;
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint256 indexed upc);
  event SentToMill(uint256 indexed upc);
  event ReceivedByMill(uint256 indexed upc);
  event Milled(uint256 indexed upc);
  event SentToRefinery(uint256 indexed upc);
  event ReceivedByRefinery(uint256 indexed upc);
  event Refined(uint256 indexed upc);
  event Packed(uint256 indexed upc);
  event ForSaleToDistributor(uint256 indexed upc);
  event BoughtByDistributor(uint256 indexed upc);
  event SentToRetailer(uint256 indexed upc);
  event ReceivedByRetailer(uint256 indexed upc);
  event ForSaleToConsumer(uint256 indexed upc);
  event BoughtByConsumer(uint256 indexed upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller(address _address) {
    require(msg.sender == _address); 
    _;
  }

  modifier isFarmer() {
    require(farmers.isFarmer(msg.sender));
    _;
  }

  modifier isMill() {
    require(mills.isMill(msg.sender));
    _;
  }

  modifier isRefinery() {
    require(refineries.isRefinery(msg.sender));
    _;
  }

  modifier isDistributor() {
    require(distributors.isDistributor(msg.sender));
    _;
  }

  modifier isRetailer() {
    require(retailers.isRetailer(msg.sender));
    _;
  }

  modifier isConsumer() {
    require(consumers.isConsumer(msg.sender));
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint256 _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint256 _price, address buyer) {
    _;
    uint256 amountToReturn = msg.value - _price;
    payable(buyer).transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint256 _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is SentToMill
  modifier sentToMill(uint256 _upc) {
    require(items[_upc].itemState == State.SentToMill);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ReceivedByMill
  modifier receivedByMill(uint256 _upc) {
    require(items[_upc].itemState == State.ReceivedByMill);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Milled
  modifier milled(uint256 _upc) {
    require(items[_upc].itemState == State.Milled);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is SentToRefinery
  modifier sentToRefinery(uint256 _upc) {
    require(items[_upc].itemState == State.SentToRefinery);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ReceivedByRefinery
  modifier receivedByRefinery(uint256 _upc) {
    require(items[_upc].itemState == State.ReceivedByRefinery);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Refined
  modifier refined(uint256 _upc) {
    require(items[_upc].itemState == State.Refined);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint256 _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSaleToDistributor
  modifier forSaleToDistributor(uint256 _upc) {
    require(items[_upc].itemState == State.ForSaleToDistributor);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is BoughtByDistributor
  modifier boughtByDistributor(uint256 _upc) {
    require(items[_upc].itemState == State.BoughtByDistributor);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is SentToRetailer
  modifier sentToRetailer(uint256 _upc) {
    require(items[_upc].itemState == State.SentToRetailer);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ReceivedByRetailer
  modifier receivedByRetailer(uint256 _upc) {
    require(items[_upc].itemState == State.ReceivedByRetailer);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSaleToConsumer
  modifier forSaleToConsumer(uint256 _upc) {
    require(items[_upc].itemState == State.ForSaleToConsumer);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is BoughtByConsumer
  modifier boughtByConsumer(uint256 _upc) {
    require(items[_upc].itemState == State.BoughtByConsumer);
    _;
  }

  constructor(
    address farmerRole,
    address millRole,
    address refineryRole,
    address distributorRole,
    address retailerRole,
    address consumerRole
  ) payable {
    sku = 1;
    
    farmers = FarmerRole(farmerRole);
    mills = MillRole(millRole);
    refineries = RefineryRole(refineryRole);
    distributors = DistributorRole(distributorRole);
    retailers = RetailerRole(retailerRole);
    consumers = ConsumerRole(consumerRole);
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(payable(owner()));
    }
  }

  // Define a function 'harvestSugarcane' that allows a farmer to mark an item 'Harvested'
  function harvestSugarcane(
    uint256 _upc,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes
  ) public 
    isFarmer()
  {
    require(items[_upc].sku == 0);

    // Add the new item as part of Harvest
    items[_upc] = Item(
      sku,
      _upc,
      msg.sender,
      State.Harvested,
      _productNotes,
      0,
      0,
      msg.sender,
      _originFarmName,
      _originFarmInformation,
      _originFarmLatitude,
      _originFarmLongitude,
      address(0),
      address(0),
      address(0),
      address(0),
      address(0)
    );
    
    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'sendToMill' that allows a farmer to mark an item 'SentToMill'
  function sendToMill(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isFarmer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.SentToMill;
    
    // Emit the appropriate event
    emit SentToMill(_upc);
  }

  // Define a function 'receiveByMill' that allows a mill to mark an item 'ReceivedByMill'
  function receiveByMill(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sentToMill(_upc)
    // Call modifier to verify caller of this function
    isMill()
  {
    // Update the appropriate fields
    items[_upc].ownerID = msg.sender;
    items[_upc].millID = msg.sender;
    items[_upc].itemState = State.ReceivedByMill;
    
    // Emit the appropriate event
    emit ReceivedByMill(_upc);
  }

  // Define a function 'millSugarcane' that allows a mill to mark an item 'Milled'
  function millSugarcane(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    receivedByMill(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isMill()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Milled;
    
    // Emit the appropriate event
    emit Milled(_upc);
  }

  // Define a function 'sendToRefinery' that allows a mill to mark an item 'SentToRefinery'
  function sendToRefinery(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    milled(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isMill()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.SentToRefinery;
    
    // Emit the appropriate event
    emit SentToRefinery(_upc);
  }

  // Define a function 'receiveByRefinery' that allows a refinery to mark an item 'ReceivedByRefinery'
  function receiveByRefinery(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sentToRefinery(_upc)
    // Call modifier to verify caller of this function
    isRefinery()
  {
    // Update the appropriate fields
    items[_upc].ownerID = msg.sender;
    items[_upc].refineryID = msg.sender;
    items[_upc].itemState = State.ReceivedByRefinery;
    
    // Emit the appropriate event
    emit ReceivedByRefinery(_upc);
  }

  // Define a function 'refineRawSugar' that allows a refinery to mark an item 'Refined'
  function refineRawSugar(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    receivedByRefinery(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isRefinery()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Refined;
    
    // Emit the appropriate event
    emit Refined(_upc);
  }

  // Define a function 'packRefinedSugar' that allows a farmer to mark an item 'Packed'
  function packRefinedSugar(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    refined(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isRefinery()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellToDistributor' that allows a refinery to mark an item 'ForSaleToDistributor'
  function sellToDistributor(uint _upc, uint _price) public 
    // Call modifier to check if upc has passed previous supply chain stage
    packed(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isRefinery()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSaleToDistributor;
    items[_upc].priceToDistributor = _price;

    // Emit the appropriate event
    emit ForSaleToDistributor(_upc);
  }

  // Define a function 'buyByDistributor' that allows the disributor to mark an item 'BoughtByDistributor'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyByDistributor(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSaleToDistributor(_upc)
    isDistributor()
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].priceToDistributor)
    // Call modifer to send any excess ether back to buyer
    checkValue(items[_upc].priceToDistributor, msg.sender)
  {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.BoughtByDistributor;
    
    // Transfer money to refinery
    payable(items[_upc].refineryID).transfer(items[_upc].priceToDistributor);

    // emit the appropriate event
    emit BoughtByDistributor(_upc);
  }

  // Define a function 'sendToRetailer' that allows the distributor to mark an item 'SentToRetailer'
  // Use the above modifers to check if the item is sold
  function sendToRetailer(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    boughtByDistributor(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isDistributor()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.SentToRetailer;

    // Emit the appropriate event
    emit SentToRetailer(_upc);
  }

  // Define a function 'receiveByRetailer' that allows the retailer to mark an item 'ReceivedByRetailer'
  // Use the above modifiers to check if the item is shipped
  function receiveByRetailer(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sentToRetailer(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    isRetailer()
  {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.ReceivedByRetailer;

    // Emit the appropriate event
    emit ReceivedByRetailer(_upc);
  }

    // Define a function 'sellToConsumer' that allows a retailer to mark an item 'ForSaleToConsumer'
  function sellToConsumer(uint _upc, uint _price) public 
    // Call modifier to check if upc has passed previous supply chain stage
    receivedByRetailer(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    isRetailer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSaleToConsumer;
    items[_upc].priceToConsumer = _price;

    // Emit the appropriate event
    emit ForSaleToConsumer(_upc);
  }

  // Define a function 'buyByConsumer' that allows the consumer to mark an item 'BoughtByConsumer'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyByConsumer(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSaleToConsumer(_upc)
    isConsumer()
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].priceToConsumer)
    // Call modifer to send any excess ether back to buyer
    checkValue(items[_upc].priceToConsumer, msg.sender)
  {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.BoughtByConsumer;
    
    // Transfer money to refinery
    payable(items[_upc].retailerID).transfer(items[_upc].priceToConsumer);

    // emit the appropriate event
    emit BoughtByConsumer(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns (
    uint256 itemSKU,
    uint256 itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
  ) {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;

    return (
      itemSKU,
      itemUPC,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns (
    uint256 itemSKU,
    uint256 itemUPC,
    string memory productNotes,
    uint256 priceToDistributor,
    uint256 priceToConsumer,
    uint256 itemState,
    address millID,
    address refineryID,
    address distributorID,
    address retailerID,
    address consumerID
  ) {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productNotes = items[_upc].productNotes;
    priceToDistributor = items[_upc].priceToDistributor;
    priceToConsumer = items[_upc].priceToConsumer;
    itemState = uint256(items[_upc].itemState);
    millID = items[_upc].millID;
    refineryID = items[_upc].refineryID;
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
    
    return (
      itemSKU,
      itemUPC,
      productNotes,
      priceToDistributor,
      priceToConsumer,
      itemState,
      millID,
      refineryID,
      distributorID,
      retailerID,
      consumerID
    );
  }
}
